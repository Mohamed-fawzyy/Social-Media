{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"./update.scss\";\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { makeRequest } from \"../../axios\";\nconst Update = ({\n  setUpdateOpen,\n  userData\n}) => {\n  _s();\n  const queryClient = useQueryClient();\n  const [cover, setCover] = useState(\"\");\n  const [profile, setProfile] = useState(\"\");\n  const [text, setText] = useState({\n    name: userData.name,\n    city: userData.city,\n    website: userData.website\n  });\n  const handleChange = e => {\n    setText(prevData => ({\n      ...prevData,\n      [e.target.name]: [e.target.value]\n    }));\n  };\n  const upload = async file => {\n    try {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      const res = await makeRequest.post(\"/upload\", formData);\n      return res.data;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const mutation = useMutation({\n    mutationFn: userInfo => {\n      return makeRequest.put('/users', userInfo);\n    },\n    onSuccess: () => {\n      // Invalidate and refetch(refresh)\n      queryClient.invalidateQueries({\n        queryKey: ['users']\n      });\n    }\n  });\n  const handleClick = async (e, res) => {\n    e.preventDefault();\n    try {\n      let coverUrl;\n      let profileUrl;\n      coverUrl = cover ? await upload(cover) : userData.coverPic;\n      profileUrl = profile ? await upload(profile) : userData.profilePic;\n      mutation.mutate({\n        ...text,\n        profilePic: profileUrl,\n        coverPic: coverUrl\n      });\n      setUpdateOpen(false);\n      setCover(null);\n      setProfile(null);\n    } catch (error) {\n      res.status(500).json(\"Error in Updating the user data : \" + error);\n    }\n  };\n\n  // return (\n  //     <div className=\"update\">\n  //         <form>\n  //             <input type=\"file\" onChange={e => setProfile(e.target.files[0])} />\n  //             <input type=\"file\" onChange={e => setCover(e.target.files[0])} />\n  //             <input type=\"text\" name=\"name\" onChange={handleChange} />\n  //             <input type=\"text\" name=\"city\" onChange={handleChange} />\n  //             <input type=\"text\" name=\"website\" onChange={handleChange} />\n  //             <button onClick={handleClick}>update</button>\n  //         </form>\n  //         <button onClick={() => setUpdateOpen(false)}>X</button>\n  //     </div>\n  // )\n};\n_s(Update, \"sENYIrXvJr5vs2B5YNk3QadwLmo=\", false, function () {\n  return [useQueryClient, useMutation];\n});\n_c = Update;\nexport default Update;\nvar _c;\n$RefreshReg$(_c, \"Update\");","map":{"version":3,"names":["useState","useMutation","useQueryClient","makeRequest","Update","setUpdateOpen","userData","_s","queryClient","cover","setCover","profile","setProfile","text","setText","name","city","website","handleChange","e","prevData","target","value","upload","file","formData","FormData","append","res","post","data","error","console","log","mutation","mutationFn","userInfo","put","onSuccess","invalidateQueries","queryKey","handleClick","preventDefault","coverUrl","profileUrl","coverPic","profilePic","mutate","status","json","_c","$RefreshReg$"],"sources":["/Users/me-mac/development/nodejs/Social Media/client/src/components/update/Update.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport \"./update.scss\"\nimport { useMutation, useQueryClient } from '@tanstack/react-query'\nimport { makeRequest } from \"../../axios\";\n\nconst Update = ({ setUpdateOpen, userData }) => {\n\n    const queryClient = useQueryClient();\n\n    const [cover, setCover] = useState(\"\")\n    const [profile, setProfile] = useState(\"\")\n    const [text, setText] = useState({\n        name: userData.name,\n        city: userData.city,\n        website: userData.website\n    });\n\n    const handleChange = (e) => {\n        setText((prevData) => ({ ...prevData, [e.target.name]: [e.target.value] }))\n    }\n\n    const upload = async (file) => {\n        try {\n            const formData = new FormData();\n            formData.append(\"file\", file);\n            const res = await makeRequest.post(\"/upload\", formData)\n            return res.data;\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    const mutation = useMutation({\n        mutationFn: (userInfo) => {\n            return makeRequest.put('/users', userInfo)\n        },\n        onSuccess: () => {\n            // Invalidate and refetch(refresh)\n            queryClient.invalidateQueries({ queryKey: ['users'] })\n        },\n    })\n\n    const handleClick = async (e, res) => {\n        e.preventDefault()\n\n        try {\n            let coverUrl;\n            let profileUrl;\n\n            coverUrl = cover ? await upload(cover) : userData.coverPic\n            profileUrl = profile ? await upload(profile) : userData.profilePic\n\n            mutation.mutate({ ...text, profilePic: profileUrl, coverPic: coverUrl })\n            setUpdateOpen(false)\n            setCover(null);\n            setProfile(null);\n        } catch (error) {\n            res.status(500).json(\"Error in Updating the user data : \" + error)\n        }\n    }\n\n    // return (\n    //     <div className=\"update\">\n    //         <form>\n    //             <input type=\"file\" onChange={e => setProfile(e.target.files[0])} />\n    //             <input type=\"file\" onChange={e => setCover(e.target.files[0])} />\n    //             <input type=\"text\" name=\"name\" onChange={handleChange} />\n    //             <input type=\"text\" name=\"city\" onChange={handleChange} />\n    //             <input type=\"text\" name=\"website\" onChange={handleChange} />\n    //             <button onClick={handleClick}>update</button>\n    //         </form>\n    //         <button onClick={() => setUpdateOpen(false)}>X</button>\n    //     </div>\n    // )\n}\n\nexport default Update;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}